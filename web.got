package main

import (
        "net/http"
        //"fmt"
        "io/ioutil"
        "html/template"
)

type Page struct {
	Title string
	Body  []byte
}

// func main() {

// 		fmt.Println("hello world")
// 		http.HandleFunc("/view/", makeHandler(viewHandler))		
//         // http.Handle("/", http.FileServer(http.Dir(".")))
//         // http.ListenAndServe(":3000", nil)
// }

// func init() {
//         http.HandleFunc("/", handler)
// }

// func handler(w http.ResponseWriter, r *http.Request) {
//         //fmt.Fprint(w, "Welcome from the language of the coming decade - Go!")

//         // http.Handle("/", http.FileServer(http.Dir(".")))
//         // http.ListenAndServe(":3000", nil)
// 	http.HandleFunc("/view/", makeHandler(viewHandler))
// 	http.Redirect(w, r, "/index.html", http.StatusFound)
// }

func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		http.Redirect(w, r, "/edit/"+title, http.StatusFound)
		return
	}
	renderTemplate(w, "index", p)
}


var templates = template.Must(template.ParseFiles("index.html", "view.html"))

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
	err := templates.ExecuteTemplate(w, tmpl+".html", p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}


func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {

		//m := validPath.FindStringSubmatch(r.URL.Path)
		m := r.URL.Path
		// if m == nil {
		// 	http.NotFound(w, r)
		// 	return
		// }
		fn(w, r, m[2])
	}
}


func loadPage(title string) (*Page, error) {
    filename := title + ".txt"
    body, err := ioutil.ReadFile(filename)
    if err != nil {
        return nil, err
    }
    return &Page{Title: title, Body: body}, nil
}

